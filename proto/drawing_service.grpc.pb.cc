// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: drawing_service.proto

#include "drawing_service.pb.h"
#include "drawing_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace Whiteboard {
namespace Drawing {

static const char* DrawingService_method_names[] = {
  "/Whiteboard.Drawing.DrawingService/DrawingStream",
};

std::unique_ptr< DrawingService::Stub> DrawingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DrawingService::Stub> stub(new DrawingService::Stub(channel, options));
  return stub;
}

DrawingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_DrawingStream_(DrawingService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::Whiteboard::Drawing::DrawingEvent, ::Whiteboard::Drawing::DrawingEvent>* DrawingService::Stub::DrawingStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::Whiteboard::Drawing::DrawingEvent, ::Whiteboard::Drawing::DrawingEvent>::Create(channel_.get(), rpcmethod_DrawingStream_, context);
}

void DrawingService::Stub::async::DrawingStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::Whiteboard::Drawing::DrawingEvent,::Whiteboard::Drawing::DrawingEvent>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::Whiteboard::Drawing::DrawingEvent,::Whiteboard::Drawing::DrawingEvent>::Create(stub_->channel_.get(), stub_->rpcmethod_DrawingStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::Whiteboard::Drawing::DrawingEvent, ::Whiteboard::Drawing::DrawingEvent>* DrawingService::Stub::AsyncDrawingStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Whiteboard::Drawing::DrawingEvent, ::Whiteboard::Drawing::DrawingEvent>::Create(channel_.get(), cq, rpcmethod_DrawingStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::Whiteboard::Drawing::DrawingEvent, ::Whiteboard::Drawing::DrawingEvent>* DrawingService::Stub::PrepareAsyncDrawingStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Whiteboard::Drawing::DrawingEvent, ::Whiteboard::Drawing::DrawingEvent>::Create(channel_.get(), cq, rpcmethod_DrawingStream_, context, false, nullptr);
}

DrawingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DrawingService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< DrawingService::Service, ::Whiteboard::Drawing::DrawingEvent, ::Whiteboard::Drawing::DrawingEvent>(
          [](DrawingService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::Whiteboard::Drawing::DrawingEvent,
             ::Whiteboard::Drawing::DrawingEvent>* stream) {
               return service->DrawingStream(ctx, stream);
             }, this)));
}

DrawingService::Service::~Service() {
}

::grpc::Status DrawingService::Service::DrawingStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Whiteboard::Drawing::DrawingEvent, ::Whiteboard::Drawing::DrawingEvent>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Whiteboard
}  // namespace Drawing

