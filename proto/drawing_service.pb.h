// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: drawing_service.proto
// Protobuf C++ Version: 6.30.0

#ifndef drawing_5fservice_2eproto_2epb_2eh
#define drawing_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "drawing_types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_drawing_5fservice_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_drawing_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_drawing_5fservice_2eproto;
}  // extern "C"
namespace Whiteboard {
namespace Drawing {
class DrawingEvent;
struct DrawingEventDefaultTypeInternal;
extern DrawingEventDefaultTypeInternal _DrawingEvent_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull DrawingEvent_class_data_;
class EraseEvent;
struct EraseEventDefaultTypeInternal;
extern EraseEventDefaultTypeInternal _EraseEvent_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull EraseEvent_class_data_;
class StreamEvent;
struct StreamEventDefaultTypeInternal;
extern StreamEventDefaultTypeInternal _StreamEvent_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull StreamEvent_class_data_;
}  // namespace Drawing
}  // namespace Whiteboard
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Whiteboard {
namespace Drawing {

// ===================================================================


// -------------------------------------------------------------------

class EraseEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Whiteboard.Drawing.EraseEvent) */ {
 public:
  inline EraseEvent() : EraseEvent(nullptr) {}
  ~EraseEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EraseEvent* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EraseEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EraseEvent(::google::protobuf::internal::ConstantInitialized);

  inline EraseEvent(const EraseEvent& from) : EraseEvent(nullptr, from) {}
  inline EraseEvent(EraseEvent&& from) noexcept
      : EraseEvent(nullptr, std::move(from)) {}
  inline EraseEvent& operator=(const EraseEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline EraseEvent& operator=(EraseEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EraseEvent& default_instance() {
    return *reinterpret_cast<const EraseEvent*>(
        &_EraseEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(EraseEvent& a, EraseEvent& b) { a.Swap(&b); }
  inline void Swap(EraseEvent* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EraseEvent* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EraseEvent* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EraseEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EraseEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EraseEvent& from) { EraseEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EraseEvent* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Whiteboard.Drawing.EraseEvent"; }

 protected:
  explicit EraseEvent(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  EraseEvent(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const EraseEvent& from);
  EraseEvent(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, EraseEvent&& from) noexcept
      : EraseEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDrawableFieldNumber = 1,
  };
  // .Whiteboard.Types.Drawable drawable = 1;
  bool has_drawable() const;
  void clear_drawable() ;
  const ::Whiteboard::Types::Drawable& drawable() const;
  [[nodiscard]] ::Whiteboard::Types::Drawable* PROTOBUF_NULLABLE release_drawable();
  ::Whiteboard::Types::Drawable* PROTOBUF_NONNULL mutable_drawable();
  void set_allocated_drawable(::Whiteboard::Types::Drawable* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_drawable(::Whiteboard::Types::Drawable* PROTOBUF_NULLABLE value);
  ::Whiteboard::Types::Drawable* PROTOBUF_NULLABLE unsafe_arena_release_drawable();

  private:
  const ::Whiteboard::Types::Drawable& _internal_drawable() const;
  ::Whiteboard::Types::Drawable* PROTOBUF_NONNULL _internal_mutable_drawable();

  public:
  // @@protoc_insertion_point(class_scope:Whiteboard.Drawing.EraseEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const EraseEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Whiteboard::Types::Drawable* PROTOBUF_NULLABLE drawable_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_drawing_5fservice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull EraseEvent_class_data_;
// -------------------------------------------------------------------

class DrawingEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Whiteboard.Drawing.DrawingEvent) */ {
 public:
  inline DrawingEvent() : DrawingEvent(nullptr) {}
  ~DrawingEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DrawingEvent* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DrawingEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DrawingEvent(::google::protobuf::internal::ConstantInitialized);

  inline DrawingEvent(const DrawingEvent& from) : DrawingEvent(nullptr, from) {}
  inline DrawingEvent(DrawingEvent&& from) noexcept
      : DrawingEvent(nullptr, std::move(from)) {}
  inline DrawingEvent& operator=(const DrawingEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawingEvent& operator=(DrawingEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawingEvent& default_instance() {
    return *reinterpret_cast<const DrawingEvent*>(
        &_DrawingEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(DrawingEvent& a, DrawingEvent& b) { a.Swap(&b); }
  inline void Swap(DrawingEvent* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawingEvent* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrawingEvent* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DrawingEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DrawingEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DrawingEvent& from) { DrawingEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DrawingEvent* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Whiteboard.Drawing.DrawingEvent"; }

 protected:
  explicit DrawingEvent(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DrawingEvent(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DrawingEvent& from);
  DrawingEvent(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DrawingEvent&& from) noexcept
      : DrawingEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDrawableFieldNumber = 1,
  };
  // .Whiteboard.Types.Drawable drawable = 1;
  bool has_drawable() const;
  void clear_drawable() ;
  const ::Whiteboard::Types::Drawable& drawable() const;
  [[nodiscard]] ::Whiteboard::Types::Drawable* PROTOBUF_NULLABLE release_drawable();
  ::Whiteboard::Types::Drawable* PROTOBUF_NONNULL mutable_drawable();
  void set_allocated_drawable(::Whiteboard::Types::Drawable* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_drawable(::Whiteboard::Types::Drawable* PROTOBUF_NULLABLE value);
  ::Whiteboard::Types::Drawable* PROTOBUF_NULLABLE unsafe_arena_release_drawable();

  private:
  const ::Whiteboard::Types::Drawable& _internal_drawable() const;
  ::Whiteboard::Types::Drawable* PROTOBUF_NONNULL _internal_mutable_drawable();

  public:
  // @@protoc_insertion_point(class_scope:Whiteboard.Drawing.DrawingEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DrawingEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Whiteboard::Types::Drawable* PROTOBUF_NULLABLE drawable_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_drawing_5fservice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull DrawingEvent_class_data_;
// -------------------------------------------------------------------

class StreamEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Whiteboard.Drawing.StreamEvent) */ {
 public:
  inline StreamEvent() : StreamEvent(nullptr) {}
  ~StreamEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StreamEvent* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StreamEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamEvent(::google::protobuf::internal::ConstantInitialized);

  inline StreamEvent(const StreamEvent& from) : StreamEvent(nullptr, from) {}
  inline StreamEvent(StreamEvent&& from) noexcept
      : StreamEvent(nullptr, std::move(from)) {}
  inline StreamEvent& operator=(const StreamEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamEvent& operator=(StreamEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamEvent& default_instance() {
    return *reinterpret_cast<const StreamEvent*>(
        &_StreamEvent_default_instance_);
  }
  enum EventTypeCase {
    kDrawingEvent = 2,
    kEraseEvent = 3,
    EVENTTYPE_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(StreamEvent& a, StreamEvent& b) { a.Swap(&b); }
  inline void Swap(StreamEvent* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamEvent* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamEvent* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StreamEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamEvent& from) { StreamEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StreamEvent* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Whiteboard.Drawing.StreamEvent"; }

 protected:
  explicit StreamEvent(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  StreamEvent(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const StreamEvent& from);
  StreamEvent(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, StreamEvent&& from) noexcept
      : StreamEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConnectionIdFieldNumber = 1,
    kDrawingEventFieldNumber = 2,
    kEraseEventFieldNumber = 3,
  };
  // int32 connectionId = 1;
  void clear_connectionid() ;
  ::int32_t connectionid() const;
  void set_connectionid(::int32_t value);

  private:
  ::int32_t _internal_connectionid() const;
  void _internal_set_connectionid(::int32_t value);

  public:
  // .Whiteboard.Drawing.DrawingEvent drawingEvent = 2;
  bool has_drawingevent() const;
  private:
  bool _internal_has_drawingevent() const;

  public:
  void clear_drawingevent() ;
  const ::Whiteboard::Drawing::DrawingEvent& drawingevent() const;
  [[nodiscard]] ::Whiteboard::Drawing::DrawingEvent* PROTOBUF_NULLABLE release_drawingevent();
  ::Whiteboard::Drawing::DrawingEvent* PROTOBUF_NONNULL mutable_drawingevent();
  void set_allocated_drawingevent(::Whiteboard::Drawing::DrawingEvent* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_drawingevent(::Whiteboard::Drawing::DrawingEvent* PROTOBUF_NULLABLE value);
  ::Whiteboard::Drawing::DrawingEvent* PROTOBUF_NULLABLE unsafe_arena_release_drawingevent();

  private:
  const ::Whiteboard::Drawing::DrawingEvent& _internal_drawingevent() const;
  ::Whiteboard::Drawing::DrawingEvent* PROTOBUF_NONNULL _internal_mutable_drawingevent();

  public:
  // .Whiteboard.Drawing.EraseEvent eraseEvent = 3;
  bool has_eraseevent() const;
  private:
  bool _internal_has_eraseevent() const;

  public:
  void clear_eraseevent() ;
  const ::Whiteboard::Drawing::EraseEvent& eraseevent() const;
  [[nodiscard]] ::Whiteboard::Drawing::EraseEvent* PROTOBUF_NULLABLE release_eraseevent();
  ::Whiteboard::Drawing::EraseEvent* PROTOBUF_NONNULL mutable_eraseevent();
  void set_allocated_eraseevent(::Whiteboard::Drawing::EraseEvent* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_eraseevent(::Whiteboard::Drawing::EraseEvent* PROTOBUF_NULLABLE value);
  ::Whiteboard::Drawing::EraseEvent* PROTOBUF_NULLABLE unsafe_arena_release_eraseevent();

  private:
  const ::Whiteboard::Drawing::EraseEvent& _internal_eraseevent() const;
  ::Whiteboard::Drawing::EraseEvent* PROTOBUF_NONNULL _internal_mutable_eraseevent();

  public:
  void clear_EventType();
  EventTypeCase EventType_case() const;
  // @@protoc_insertion_point(class_scope:Whiteboard.Drawing.StreamEvent)
 private:
  class _Internal;
  void set_has_drawingevent();
  void set_has_eraseevent();
  inline bool has_EventType() const;
  inline void clear_has_EventType();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 3,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const StreamEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t connectionid_;
    union EventTypeUnion {
      constexpr EventTypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::Whiteboard::Drawing::DrawingEvent* PROTOBUF_NULLABLE drawingevent_;
      ::Whiteboard::Drawing::EraseEvent* PROTOBUF_NULLABLE eraseevent_;
    } EventType_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_drawing_5fservice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull StreamEvent_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StreamEvent

// int32 connectionId = 1;
inline void StreamEvent::clear_connectionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connectionid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t StreamEvent::connectionid() const {
  // @@protoc_insertion_point(field_get:Whiteboard.Drawing.StreamEvent.connectionId)
  return _internal_connectionid();
}
inline void StreamEvent::set_connectionid(::int32_t value) {
  _internal_set_connectionid(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:Whiteboard.Drawing.StreamEvent.connectionId)
}
inline ::int32_t StreamEvent::_internal_connectionid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.connectionid_;
}
inline void StreamEvent::_internal_set_connectionid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connectionid_ = value;
}

// .Whiteboard.Drawing.DrawingEvent drawingEvent = 2;
inline bool StreamEvent::has_drawingevent() const {
  return EventType_case() == kDrawingEvent;
}
inline bool StreamEvent::_internal_has_drawingevent() const {
  return EventType_case() == kDrawingEvent;
}
inline void StreamEvent::set_has_drawingevent() {
  _impl_._oneof_case_[0] = kDrawingEvent;
}
inline void StreamEvent::clear_drawingevent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (EventType_case() == kDrawingEvent) {
    if (GetArena() == nullptr) {
      delete _impl_.EventType_.drawingevent_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.EventType_.drawingevent_);
    }
    clear_has_EventType();
  }
}
inline ::Whiteboard::Drawing::DrawingEvent* PROTOBUF_NULLABLE StreamEvent::release_drawingevent() {
  // @@protoc_insertion_point(field_release:Whiteboard.Drawing.StreamEvent.drawingEvent)
  if (EventType_case() == kDrawingEvent) {
    clear_has_EventType();
    auto* temp = _impl_.EventType_.drawingevent_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.EventType_.drawingevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Whiteboard::Drawing::DrawingEvent& StreamEvent::_internal_drawingevent() const {
  return EventType_case() == kDrawingEvent ? *_impl_.EventType_.drawingevent_ : reinterpret_cast<::Whiteboard::Drawing::DrawingEvent&>(::Whiteboard::Drawing::_DrawingEvent_default_instance_);
}
inline const ::Whiteboard::Drawing::DrawingEvent& StreamEvent::drawingevent() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Whiteboard.Drawing.StreamEvent.drawingEvent)
  return _internal_drawingevent();
}
inline ::Whiteboard::Drawing::DrawingEvent* PROTOBUF_NULLABLE StreamEvent::unsafe_arena_release_drawingevent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Whiteboard.Drawing.StreamEvent.drawingEvent)
  if (EventType_case() == kDrawingEvent) {
    clear_has_EventType();
    auto* temp = _impl_.EventType_.drawingevent_;
    _impl_.EventType_.drawingevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamEvent::unsafe_arena_set_allocated_drawingevent(
    ::Whiteboard::Drawing::DrawingEvent* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_EventType();
  if (value) {
    set_has_drawingevent();
    _impl_.EventType_.drawingevent_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Whiteboard.Drawing.StreamEvent.drawingEvent)
}
inline ::Whiteboard::Drawing::DrawingEvent* PROTOBUF_NONNULL StreamEvent::_internal_mutable_drawingevent() {
  if (EventType_case() != kDrawingEvent) {
    clear_EventType();
    set_has_drawingevent();
    _impl_.EventType_.drawingevent_ = 
        ::google::protobuf::Message::DefaultConstruct<::Whiteboard::Drawing::DrawingEvent>(GetArena());
  }
  return _impl_.EventType_.drawingevent_;
}
inline ::Whiteboard::Drawing::DrawingEvent* PROTOBUF_NONNULL StreamEvent::mutable_drawingevent()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Whiteboard::Drawing::DrawingEvent* _msg = _internal_mutable_drawingevent();
  // @@protoc_insertion_point(field_mutable:Whiteboard.Drawing.StreamEvent.drawingEvent)
  return _msg;
}

// .Whiteboard.Drawing.EraseEvent eraseEvent = 3;
inline bool StreamEvent::has_eraseevent() const {
  return EventType_case() == kEraseEvent;
}
inline bool StreamEvent::_internal_has_eraseevent() const {
  return EventType_case() == kEraseEvent;
}
inline void StreamEvent::set_has_eraseevent() {
  _impl_._oneof_case_[0] = kEraseEvent;
}
inline void StreamEvent::clear_eraseevent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (EventType_case() == kEraseEvent) {
    if (GetArena() == nullptr) {
      delete _impl_.EventType_.eraseevent_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.EventType_.eraseevent_);
    }
    clear_has_EventType();
  }
}
inline ::Whiteboard::Drawing::EraseEvent* PROTOBUF_NULLABLE StreamEvent::release_eraseevent() {
  // @@protoc_insertion_point(field_release:Whiteboard.Drawing.StreamEvent.eraseEvent)
  if (EventType_case() == kEraseEvent) {
    clear_has_EventType();
    auto* temp = _impl_.EventType_.eraseevent_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.EventType_.eraseevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Whiteboard::Drawing::EraseEvent& StreamEvent::_internal_eraseevent() const {
  return EventType_case() == kEraseEvent ? *_impl_.EventType_.eraseevent_ : reinterpret_cast<::Whiteboard::Drawing::EraseEvent&>(::Whiteboard::Drawing::_EraseEvent_default_instance_);
}
inline const ::Whiteboard::Drawing::EraseEvent& StreamEvent::eraseevent() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Whiteboard.Drawing.StreamEvent.eraseEvent)
  return _internal_eraseevent();
}
inline ::Whiteboard::Drawing::EraseEvent* PROTOBUF_NULLABLE StreamEvent::unsafe_arena_release_eraseevent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Whiteboard.Drawing.StreamEvent.eraseEvent)
  if (EventType_case() == kEraseEvent) {
    clear_has_EventType();
    auto* temp = _impl_.EventType_.eraseevent_;
    _impl_.EventType_.eraseevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamEvent::unsafe_arena_set_allocated_eraseevent(
    ::Whiteboard::Drawing::EraseEvent* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_EventType();
  if (value) {
    set_has_eraseevent();
    _impl_.EventType_.eraseevent_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Whiteboard.Drawing.StreamEvent.eraseEvent)
}
inline ::Whiteboard::Drawing::EraseEvent* PROTOBUF_NONNULL StreamEvent::_internal_mutable_eraseevent() {
  if (EventType_case() != kEraseEvent) {
    clear_EventType();
    set_has_eraseevent();
    _impl_.EventType_.eraseevent_ = 
        ::google::protobuf::Message::DefaultConstruct<::Whiteboard::Drawing::EraseEvent>(GetArena());
  }
  return _impl_.EventType_.eraseevent_;
}
inline ::Whiteboard::Drawing::EraseEvent* PROTOBUF_NONNULL StreamEvent::mutable_eraseevent()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Whiteboard::Drawing::EraseEvent* _msg = _internal_mutable_eraseevent();
  // @@protoc_insertion_point(field_mutable:Whiteboard.Drawing.StreamEvent.eraseEvent)
  return _msg;
}

inline bool StreamEvent::has_EventType() const {
  return EventType_case() != EVENTTYPE_NOT_SET;
}
inline void StreamEvent::clear_has_EventType() {
  _impl_._oneof_case_[0] = EVENTTYPE_NOT_SET;
}
inline StreamEvent::EventTypeCase StreamEvent::EventType_case() const {
  return StreamEvent::EventTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DrawingEvent

// .Whiteboard.Types.Drawable drawable = 1;
inline bool DrawingEvent::has_drawable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.drawable_ != nullptr);
  return value;
}
inline const ::Whiteboard::Types::Drawable& DrawingEvent::_internal_drawable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Whiteboard::Types::Drawable* p = _impl_.drawable_;
  return p != nullptr ? *p : reinterpret_cast<const ::Whiteboard::Types::Drawable&>(::Whiteboard::Types::_Drawable_default_instance_);
}
inline const ::Whiteboard::Types::Drawable& DrawingEvent::drawable() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Whiteboard.Drawing.DrawingEvent.drawable)
  return _internal_drawable();
}
inline void DrawingEvent::unsafe_arena_set_allocated_drawable(
    ::Whiteboard::Types::Drawable* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.drawable_);
  }
  _impl_.drawable_ = reinterpret_cast<::Whiteboard::Types::Drawable*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Whiteboard.Drawing.DrawingEvent.drawable)
}
inline ::Whiteboard::Types::Drawable* PROTOBUF_NULLABLE DrawingEvent::release_drawable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Whiteboard::Types::Drawable* released = _impl_.drawable_;
  _impl_.drawable_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::Whiteboard::Types::Drawable* PROTOBUF_NULLABLE DrawingEvent::unsafe_arena_release_drawable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Whiteboard.Drawing.DrawingEvent.drawable)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Whiteboard::Types::Drawable* temp = _impl_.drawable_;
  _impl_.drawable_ = nullptr;
  return temp;
}
inline ::Whiteboard::Types::Drawable* PROTOBUF_NONNULL DrawingEvent::_internal_mutable_drawable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.drawable_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Whiteboard::Types::Drawable>(GetArena());
    _impl_.drawable_ = reinterpret_cast<::Whiteboard::Types::Drawable*>(p);
  }
  return _impl_.drawable_;
}
inline ::Whiteboard::Types::Drawable* PROTOBUF_NONNULL DrawingEvent::mutable_drawable()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Whiteboard::Types::Drawable* _msg = _internal_mutable_drawable();
  // @@protoc_insertion_point(field_mutable:Whiteboard.Drawing.DrawingEvent.drawable)
  return _msg;
}
inline void DrawingEvent::set_allocated_drawable(::Whiteboard::Types::Drawable* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.drawable_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.drawable_ = reinterpret_cast<::Whiteboard::Types::Drawable*>(value);
  // @@protoc_insertion_point(field_set_allocated:Whiteboard.Drawing.DrawingEvent.drawable)
}

// -------------------------------------------------------------------

// EraseEvent

// .Whiteboard.Types.Drawable drawable = 1;
inline bool EraseEvent::has_drawable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.drawable_ != nullptr);
  return value;
}
inline const ::Whiteboard::Types::Drawable& EraseEvent::_internal_drawable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Whiteboard::Types::Drawable* p = _impl_.drawable_;
  return p != nullptr ? *p : reinterpret_cast<const ::Whiteboard::Types::Drawable&>(::Whiteboard::Types::_Drawable_default_instance_);
}
inline const ::Whiteboard::Types::Drawable& EraseEvent::drawable() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Whiteboard.Drawing.EraseEvent.drawable)
  return _internal_drawable();
}
inline void EraseEvent::unsafe_arena_set_allocated_drawable(
    ::Whiteboard::Types::Drawable* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.drawable_);
  }
  _impl_.drawable_ = reinterpret_cast<::Whiteboard::Types::Drawable*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Whiteboard.Drawing.EraseEvent.drawable)
}
inline ::Whiteboard::Types::Drawable* PROTOBUF_NULLABLE EraseEvent::release_drawable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Whiteboard::Types::Drawable* released = _impl_.drawable_;
  _impl_.drawable_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::Whiteboard::Types::Drawable* PROTOBUF_NULLABLE EraseEvent::unsafe_arena_release_drawable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Whiteboard.Drawing.EraseEvent.drawable)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Whiteboard::Types::Drawable* temp = _impl_.drawable_;
  _impl_.drawable_ = nullptr;
  return temp;
}
inline ::Whiteboard::Types::Drawable* PROTOBUF_NONNULL EraseEvent::_internal_mutable_drawable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.drawable_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Whiteboard::Types::Drawable>(GetArena());
    _impl_.drawable_ = reinterpret_cast<::Whiteboard::Types::Drawable*>(p);
  }
  return _impl_.drawable_;
}
inline ::Whiteboard::Types::Drawable* PROTOBUF_NONNULL EraseEvent::mutable_drawable()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Whiteboard::Types::Drawable* _msg = _internal_mutable_drawable();
  // @@protoc_insertion_point(field_mutable:Whiteboard.Drawing.EraseEvent.drawable)
  return _msg;
}
inline void EraseEvent::set_allocated_drawable(::Whiteboard::Types::Drawable* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.drawable_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.drawable_ = reinterpret_cast<::Whiteboard::Types::Drawable*>(value);
  // @@protoc_insertion_point(field_set_allocated:Whiteboard.Drawing.EraseEvent.drawable)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Drawing
}  // namespace Whiteboard


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // drawing_5fservice_2eproto_2epb_2eh
